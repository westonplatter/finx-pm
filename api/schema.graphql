schema {
	query: Query,
	mutation: Mutation
}

type Group {
	id: ID!,
	name: String!
}

type GroupTrade {
	id: ID!,
	trade: Trade!,
	group: Group!
}

type Trade {
	id: ID!,
  accountId: String,
  tradeID: String,
  transactionID: String,

	symbol: String!,
  underlyingSymbol: String,
  conId: String,
  securityID: String,
	securityIDType: String,
  underlyingConid: String,
  underlyingSecurityID: String,

  transactionType: String,

	ibOrderID: String,
	ibExecID: String,
	description: String,
	multiplier: Int,
	strike: String,
	expiry: String,
	putCall: String,
	dateTime: String,
	tradeDate: String,
	quantity: Float,
	tradePrice: Float,
	proceeds: Float,
	ibCommission: Float,
	netCash: Float,
	closePrice: Float,
	openCloseIndicator: String,
	fifoPnlRealized: Float,
	fxPnl: Float,
	mtmPnl: Float,
	buySell: String

	# -- accountId
	# acctAlias
	# model,
	# currency,
	# fxRateToBase,
	# assetCategory,
	# -- symbol,
	# -- description,
	# -- conid,
	# -- securityID,
	# -- securityIDType,
	# cusip,
	# isin,
	# listingExchange,
	# -- underlyingConid,
	# -- underlyingSymbol,
	# -- underlyingSecurityID,
	# underlyingListingExchange,
	# issuer,
	# -- multiplier,
	# -- strike,
	# -- expiry,
	# -- tradeID,
	# -- putCall,
	# reportDate,
	# principalAdjustFactor,
	# -- dateTime,
	# -- tradeDate,
	# settleDateTarget,
	# transactionType,
	# exchange,
	# -- quantity,
	# -- tradePrice,
	# tradeMoney,
	# -- proceeds,
	# taxes,
	# -- ibCommission,
	# ibCommissionCurrency,
	# -- netCash,
	# -- closePrice,
	# -- openCloseIndicator,
	# notes,
	# cost,
	# -- fifoPnlRealized,
	# -- fxPnl,
	# -- mtmPnl,
	# origTradePrice,
	# origTradeDate,
	# origTradeID,
	# origOrderID,
	# clearingFirmID,
	# -- transactionID,
	# -- buySell,
	# -- ibOrderID,
	# -- ibExecID,
	# brokerageOrderID,
	# orderReference,
	# volatilityOrderLink,
	# exchOrderId,
	# extExecID,
	# orderTime,
	# openDateTime,
	# holdingPeriodDateTime,
	# whenRealized,
	# whenReopened,
	# levelOfDetail,
	# changeInPrice,
	# changeInQuantity,
	# orderType,
	# traderID,
	# isAPIOrder,
	# accruedInt
}

type TradeResult {
	success: Boolean!,
	errors: [String!],
	trade: Trade!
}

type TradesResult {
	success: Boolean!,
	errors: [String!],
	trades: [Trade!]
}

type GroupResult {
	success: Boolean!,
	errors: [String!],
	group: Group!
}

type GroupsResult {
	success: Boolean!,
	errors: [String!],
	groups: [Group!]
}

type Query  {
	trades(symbol: String): TradesResult!,
	trade(tradeId: ID!): TradeResult,
	groups: GroupsResult,
}

type deleteTradeResult {
	success: Boolean!,
	errors: [String!],
}

type Mutation {
	createTradeSimple(symbol: String!): TradeResult!
	createTrade(
		symbol: String!,
		tradeID: String!,
		ibOrderID: String!,
		ibExecID: String!,
		transactionID: String!,
		accountId: String!,
		underlyingSymbol: String!,
		description: String!,
		multiplier: Int!,
		strike: String!,
		expiry: String!,
		putCall: String!,
		dateTime: String!,
		tradeDate: String!,
		quantity: Float!,
		tradePrice: Float!,
		proceeds: Float!,
		ibCommission: Float!,
		netCash: Float!,
		closePrice: Float!,
		openCloseIndicator: String!,
		fifoPnlRealized: Float!,
		fxPnl: Float!,
		mtmPnl: Float!,
		buySell: String!
	): TradeResult!

	deleteTrade(tradeId: ID!): deleteTradeResult!
	createGroup(name: String!): GroupResult!,
}
